### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

type Coupon {
  createdAt: DateTime!
  Event: Event
  eventId: String
  id: Int!
  redeemer: User
  redeemerId: Int
  Redemption(cursor: RedemptionWhereUniqueInput, skip: Int, take: Int): [Redemption!]!
}

input CouponCreateInput {
  createdAt: DateTime
  Event: EventCreateOneWithoutCouponsInput
  redeemer: UserCreateOneWithoutCouponInput
  Redemption: RedemptionCreateManyWithoutCouponInput
}

input CouponCreateManyWithoutEventInput {
  connect: [CouponWhereUniqueInput!]
  create: [CouponCreateWithoutEventInput!]
}

input CouponCreateManyWithoutRedeemerInput {
  connect: [CouponWhereUniqueInput!]
  create: [CouponCreateWithoutRedeemerInput!]
}

input CouponCreateOneWithoutRedemptionInput {
  connect: CouponWhereUniqueInput
  create: CouponCreateWithoutRedemptionInput
}

input CouponCreateWithoutEventInput {
  createdAt: DateTime
  redeemer: UserCreateOneWithoutCouponInput
  Redemption: RedemptionCreateManyWithoutCouponInput
}

input CouponCreateWithoutRedeemerInput {
  createdAt: DateTime
  Event: EventCreateOneWithoutCouponsInput
  Redemption: RedemptionCreateManyWithoutCouponInput
}

input CouponCreateWithoutRedemptionInput {
  createdAt: DateTime
  Event: EventCreateOneWithoutCouponsInput
  redeemer: UserCreateOneWithoutCouponInput
}

input CouponFilter {
  every: CouponWhereInput
  none: CouponWhereInput
  some: CouponWhereInput
}

input CouponScalarWhereInput {
  AND: [CouponScalarWhereInput!]
  createdAt: DateTimeFilter
  eventId: NullableStringFilter
  id: IntFilter
  NOT: [CouponScalarWhereInput!]
  OR: [CouponScalarWhereInput!]
  redeemerId: NullableIntFilter
  Redemption: RedemptionFilter
}

input CouponUpdateInput {
  createdAt: DateTime
  Event: EventUpdateOneWithoutCouponsInput
  id: Int
  redeemer: UserUpdateOneWithoutCouponInput
  Redemption: RedemptionUpdateManyWithoutCouponInput
}

input CouponUpdateManyDataInput {
  createdAt: DateTime
  id: Int
}

input CouponUpdateManyMutationInput {
  createdAt: DateTime
  id: Int
}

input CouponUpdateManyWithoutEventInput {
  connect: [CouponWhereUniqueInput!]
  create: [CouponCreateWithoutEventInput!]
  delete: [CouponWhereUniqueInput!]
  deleteMany: [CouponScalarWhereInput!]
  disconnect: [CouponWhereUniqueInput!]
  set: [CouponWhereUniqueInput!]
  update: [CouponUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [CouponUpdateManyWithWhereNestedInput!]
  upsert: [CouponUpsertWithWhereUniqueWithoutEventInput!]
}

input CouponUpdateManyWithoutRedeemerInput {
  connect: [CouponWhereUniqueInput!]
  create: [CouponCreateWithoutRedeemerInput!]
  delete: [CouponWhereUniqueInput!]
  deleteMany: [CouponScalarWhereInput!]
  disconnect: [CouponWhereUniqueInput!]
  set: [CouponWhereUniqueInput!]
  update: [CouponUpdateWithWhereUniqueWithoutRedeemerInput!]
  updateMany: [CouponUpdateManyWithWhereNestedInput!]
  upsert: [CouponUpsertWithWhereUniqueWithoutRedeemerInput!]
}

input CouponUpdateManyWithWhereNestedInput {
  data: CouponUpdateManyDataInput!
  where: CouponScalarWhereInput!
}

input CouponUpdateOneRequiredWithoutRedemptionInput {
  connect: CouponWhereUniqueInput
  create: CouponCreateWithoutRedemptionInput
  update: CouponUpdateWithoutRedemptionDataInput
  upsert: CouponUpsertWithoutRedemptionInput
}

input CouponUpdateWithoutEventDataInput {
  createdAt: DateTime
  id: Int
  redeemer: UserUpdateOneWithoutCouponInput
  Redemption: RedemptionUpdateManyWithoutCouponInput
}

input CouponUpdateWithoutRedeemerDataInput {
  createdAt: DateTime
  Event: EventUpdateOneWithoutCouponsInput
  id: Int
  Redemption: RedemptionUpdateManyWithoutCouponInput
}

input CouponUpdateWithoutRedemptionDataInput {
  createdAt: DateTime
  Event: EventUpdateOneWithoutCouponsInput
  id: Int
  redeemer: UserUpdateOneWithoutCouponInput
}

input CouponUpdateWithWhereUniqueWithoutEventInput {
  data: CouponUpdateWithoutEventDataInput!
  where: CouponWhereUniqueInput!
}

input CouponUpdateWithWhereUniqueWithoutRedeemerInput {
  data: CouponUpdateWithoutRedeemerDataInput!
  where: CouponWhereUniqueInput!
}

input CouponUpsertWithoutRedemptionInput {
  create: CouponCreateWithoutRedemptionInput!
  update: CouponUpdateWithoutRedemptionDataInput!
}

input CouponUpsertWithWhereUniqueWithoutEventInput {
  create: CouponCreateWithoutEventInput!
  update: CouponUpdateWithoutEventDataInput!
  where: CouponWhereUniqueInput!
}

input CouponUpsertWithWhereUniqueWithoutRedeemerInput {
  create: CouponCreateWithoutRedeemerInput!
  update: CouponUpdateWithoutRedeemerDataInput!
  where: CouponWhereUniqueInput!
}

input CouponWhereInput {
  AND: [CouponWhereInput!]
  createdAt: DateTimeFilter
  Event: EventWhereInput
  eventId: NullableStringFilter
  id: IntFilter
  NOT: [CouponWhereInput!]
  OR: [CouponWhereInput!]
  redeemer: UserWhereInput
  redeemerId: NullableIntFilter
  Redemption: RedemptionFilter
}

input CouponWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Document {
  createdAt: DateTime!
  id: Int!
  path: String!
  redemption: Redemption!
  redemptionId: Int!
  submitter: User
  submitterId: Int
  updatedAt: DateTime!
}

input DocumentCreateInput {
  createdAt: DateTime
  path: String!
  redemption: RedemptionCreateOneWithoutDocumentInput!
  submitter: UserCreateOneWithoutDocumentInput
  updatedAt: DateTime
}

input DocumentCreateManyWithoutRedemptionInput {
  connect: [DocumentWhereUniqueInput!]
  create: [DocumentCreateWithoutRedemptionInput!]
}

input DocumentCreateManyWithoutSubmitterInput {
  connect: [DocumentWhereUniqueInput!]
  create: [DocumentCreateWithoutSubmitterInput!]
}

input DocumentCreateWithoutRedemptionInput {
  createdAt: DateTime
  path: String!
  submitter: UserCreateOneWithoutDocumentInput
  updatedAt: DateTime
}

input DocumentCreateWithoutSubmitterInput {
  createdAt: DateTime
  path: String!
  redemption: RedemptionCreateOneWithoutDocumentInput!
  updatedAt: DateTime
}

input DocumentFilter {
  every: DocumentWhereInput
  none: DocumentWhereInput
  some: DocumentWhereInput
}

input DocumentScalarWhereInput {
  AND: [DocumentScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [DocumentScalarWhereInput!]
  OR: [DocumentScalarWhereInput!]
  path: StringFilter
  redemptionId: IntFilter
  submitterId: NullableIntFilter
  updatedAt: DateTimeFilter
}

input DocumentUpdateInput {
  createdAt: DateTime
  id: Int
  path: String
  redemption: RedemptionUpdateOneRequiredWithoutDocumentInput
  submitter: UserUpdateOneWithoutDocumentInput
  updatedAt: DateTime
}

input DocumentUpdateManyDataInput {
  createdAt: DateTime
  id: Int
  path: String
  updatedAt: DateTime
}

input DocumentUpdateManyMutationInput {
  createdAt: DateTime
  id: Int
  path: String
  updatedAt: DateTime
}

input DocumentUpdateManyWithoutRedemptionInput {
  connect: [DocumentWhereUniqueInput!]
  create: [DocumentCreateWithoutRedemptionInput!]
  delete: [DocumentWhereUniqueInput!]
  deleteMany: [DocumentScalarWhereInput!]
  disconnect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
  update: [DocumentUpdateWithWhereUniqueWithoutRedemptionInput!]
  updateMany: [DocumentUpdateManyWithWhereNestedInput!]
  upsert: [DocumentUpsertWithWhereUniqueWithoutRedemptionInput!]
}

input DocumentUpdateManyWithoutSubmitterInput {
  connect: [DocumentWhereUniqueInput!]
  create: [DocumentCreateWithoutSubmitterInput!]
  delete: [DocumentWhereUniqueInput!]
  deleteMany: [DocumentScalarWhereInput!]
  disconnect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
  update: [DocumentUpdateWithWhereUniqueWithoutSubmitterInput!]
  updateMany: [DocumentUpdateManyWithWhereNestedInput!]
  upsert: [DocumentUpsertWithWhereUniqueWithoutSubmitterInput!]
}

input DocumentUpdateManyWithWhereNestedInput {
  data: DocumentUpdateManyDataInput!
  where: DocumentScalarWhereInput!
}

input DocumentUpdateWithoutRedemptionDataInput {
  createdAt: DateTime
  id: Int
  path: String
  submitter: UserUpdateOneWithoutDocumentInput
  updatedAt: DateTime
}

input DocumentUpdateWithoutSubmitterDataInput {
  createdAt: DateTime
  id: Int
  path: String
  redemption: RedemptionUpdateOneRequiredWithoutDocumentInput
  updatedAt: DateTime
}

input DocumentUpdateWithWhereUniqueWithoutRedemptionInput {
  data: DocumentUpdateWithoutRedemptionDataInput!
  where: DocumentWhereUniqueInput!
}

input DocumentUpdateWithWhereUniqueWithoutSubmitterInput {
  data: DocumentUpdateWithoutSubmitterDataInput!
  where: DocumentWhereUniqueInput!
}

input DocumentUpsertWithWhereUniqueWithoutRedemptionInput {
  create: DocumentCreateWithoutRedemptionInput!
  update: DocumentUpdateWithoutRedemptionDataInput!
  where: DocumentWhereUniqueInput!
}

input DocumentUpsertWithWhereUniqueWithoutSubmitterInput {
  create: DocumentCreateWithoutSubmitterInput!
  update: DocumentUpdateWithoutSubmitterDataInput!
  where: DocumentWhereUniqueInput!
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  path: StringFilter
  redemption: RedemptionWhereInput
  redemptionId: IntFilter
  submitter: UserWhereInput
  submitterId: NullableIntFilter
  updatedAt: DateTimeFilter
}

input DocumentWhereUniqueInput {
  id: Int
}

type Event {
  coupons(cursor: CouponWhereUniqueInput, skip: Int, take: Int): [Coupon!]!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input EventCreateInput {
  coupons: CouponCreateManyWithoutEventInput
  createdAt: DateTime
  id: String!
  updatedAt: DateTime
}

input EventCreateOneWithoutCouponsInput {
  connect: EventWhereUniqueInput
  create: EventCreateWithoutCouponsInput
}

input EventCreateWithoutCouponsInput {
  createdAt: DateTime
  id: String!
  updatedAt: DateTime
}

input EventUpdateInput {
  coupons: CouponUpdateManyWithoutEventInput
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input EventUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input EventUpdateOneWithoutCouponsInput {
  connect: EventWhereUniqueInput
  create: EventCreateWithoutCouponsInput
  delete: Boolean
  disconnect: Boolean
  update: EventUpdateWithoutCouponsDataInput
  upsert: EventUpsertWithoutCouponsInput
}

input EventUpdateWithoutCouponsDataInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input EventUpsertWithoutCouponsInput {
  create: EventCreateWithoutCouponsInput!
  update: EventUpdateWithoutCouponsDataInput!
}

input EventWhereInput {
  AND: [EventWhereInput!]
  coupons: CouponFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  updatedAt: DateTimeFilter
}

input EventWhereUniqueInput {
  id: String
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneCoupon(data: CouponCreateInput!): Coupon!
  createOneDocument(data: DocumentCreateInput!): Document!
  createOneEvent(data: EventCreateInput!): Event!
  createOneRedemption(data: RedemptionCreateInput!): Redemption!
  createOneUser(data: UserCreateInput!): User!
  deleteManyCoupon(where: CouponWhereInput): BatchPayload!
  deleteManyDocument(where: DocumentWhereInput): BatchPayload!
  deleteManyEvent(where: EventWhereInput): BatchPayload!
  deleteManyRedemption(where: RedemptionWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneCoupon(where: CouponWhereUniqueInput!): Coupon
  deleteOneDocument(where: DocumentWhereUniqueInput!): Document
  deleteOneEvent(where: EventWhereUniqueInput!): Event
  deleteOneRedemption(where: RedemptionWhereUniqueInput!): Redemption
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyCoupon(data: CouponUpdateManyMutationInput!, where: CouponWhereInput): BatchPayload!
  updateManyDocument(data: DocumentUpdateManyMutationInput!, where: DocumentWhereInput): BatchPayload!
  updateManyEvent(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyRedemption(data: RedemptionUpdateManyMutationInput!, where: RedemptionWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateOneCoupon(data: CouponUpdateInput!, where: CouponWhereUniqueInput!): Coupon
  updateOneDocument(data: DocumentUpdateInput!, where: DocumentWhereUniqueInput!): Document
  updateOneEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateOneRedemption(data: RedemptionUpdateInput!, where: RedemptionWhereUniqueInput!): Redemption
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneCoupon(create: CouponCreateInput!, update: CouponUpdateInput!, where: CouponWhereUniqueInput!): Coupon!
  upsertOneDocument(create: DocumentCreateInput!, update: DocumentUpdateInput!, where: DocumentWhereUniqueInput!): Document!
  upsertOneEvent(create: EventCreateInput!, update: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
  upsertOneRedemption(create: RedemptionCreateInput!, update: RedemptionUpdateInput!, where: RedemptionWhereUniqueInput!): Redemption!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Query {
  coupon(where: CouponWhereUniqueInput!): Coupon
  coupons(cursor: CouponWhereUniqueInput, skip: Int, take: Int): [Coupon!]!
  document(where: DocumentWhereUniqueInput!): Document
  documents(cursor: DocumentWhereUniqueInput, skip: Int, take: Int): [Document!]!
  event(where: EventWhereUniqueInput!): Event
  events(cursor: EventWhereUniqueInput, skip: Int, take: Int): [Event!]!
  redemption(where: RedemptionWhereUniqueInput!): Redemption
  redemptions(cursor: RedemptionWhereUniqueInput, skip: Int, take: Int): [Redemption!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, skip: Int, take: Int): [User!]!
}

type Redemption {
  coupon: Coupon!
  couponId: Int!
  createdAt: DateTime!
  document(cursor: DocumentWhereUniqueInput, skip: Int, take: Int): [Document!]!
  id: Int!
  Submission: String
  User: User
  userId: Int
}

input RedemptionCreateInput {
  coupon: CouponCreateOneWithoutRedemptionInput!
  createdAt: DateTime
  document: DocumentCreateManyWithoutRedemptionInput
  Submission: String
  User: UserCreateOneWithoutRedemptionsInput
}

input RedemptionCreateManyWithoutCouponInput {
  connect: [RedemptionWhereUniqueInput!]
  create: [RedemptionCreateWithoutCouponInput!]
}

input RedemptionCreateManyWithoutUserInput {
  connect: [RedemptionWhereUniqueInput!]
  create: [RedemptionCreateWithoutUserInput!]
}

input RedemptionCreateOneWithoutDocumentInput {
  connect: RedemptionWhereUniqueInput
  create: RedemptionCreateWithoutDocumentInput
}

input RedemptionCreateWithoutCouponInput {
  createdAt: DateTime
  document: DocumentCreateManyWithoutRedemptionInput
  Submission: String
  User: UserCreateOneWithoutRedemptionsInput
}

input RedemptionCreateWithoutDocumentInput {
  coupon: CouponCreateOneWithoutRedemptionInput!
  createdAt: DateTime
  Submission: String
  User: UserCreateOneWithoutRedemptionsInput
}

input RedemptionCreateWithoutUserInput {
  coupon: CouponCreateOneWithoutRedemptionInput!
  createdAt: DateTime
  document: DocumentCreateManyWithoutRedemptionInput
  Submission: String
}

input RedemptionFilter {
  every: RedemptionWhereInput
  none: RedemptionWhereInput
  some: RedemptionWhereInput
}

input RedemptionScalarWhereInput {
  AND: [RedemptionScalarWhereInput!]
  couponId: IntFilter
  createdAt: DateTimeFilter
  document: DocumentFilter
  id: IntFilter
  NOT: [RedemptionScalarWhereInput!]
  OR: [RedemptionScalarWhereInput!]
  Submission: NullableStringFilter
  userId: NullableIntFilter
}

input RedemptionUpdateInput {
  coupon: CouponUpdateOneRequiredWithoutRedemptionInput
  createdAt: DateTime
  document: DocumentUpdateManyWithoutRedemptionInput
  id: Int
  Submission: String
  User: UserUpdateOneWithoutRedemptionsInput
}

input RedemptionUpdateManyDataInput {
  createdAt: DateTime
  id: Int
  Submission: String
}

input RedemptionUpdateManyMutationInput {
  createdAt: DateTime
  id: Int
  Submission: String
}

input RedemptionUpdateManyWithoutCouponInput {
  connect: [RedemptionWhereUniqueInput!]
  create: [RedemptionCreateWithoutCouponInput!]
  delete: [RedemptionWhereUniqueInput!]
  deleteMany: [RedemptionScalarWhereInput!]
  disconnect: [RedemptionWhereUniqueInput!]
  set: [RedemptionWhereUniqueInput!]
  update: [RedemptionUpdateWithWhereUniqueWithoutCouponInput!]
  updateMany: [RedemptionUpdateManyWithWhereNestedInput!]
  upsert: [RedemptionUpsertWithWhereUniqueWithoutCouponInput!]
}

input RedemptionUpdateManyWithoutUserInput {
  connect: [RedemptionWhereUniqueInput!]
  create: [RedemptionCreateWithoutUserInput!]
  delete: [RedemptionWhereUniqueInput!]
  deleteMany: [RedemptionScalarWhereInput!]
  disconnect: [RedemptionWhereUniqueInput!]
  set: [RedemptionWhereUniqueInput!]
  update: [RedemptionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [RedemptionUpdateManyWithWhereNestedInput!]
  upsert: [RedemptionUpsertWithWhereUniqueWithoutUserInput!]
}

input RedemptionUpdateManyWithWhereNestedInput {
  data: RedemptionUpdateManyDataInput!
  where: RedemptionScalarWhereInput!
}

input RedemptionUpdateOneRequiredWithoutDocumentInput {
  connect: RedemptionWhereUniqueInput
  create: RedemptionCreateWithoutDocumentInput
  update: RedemptionUpdateWithoutDocumentDataInput
  upsert: RedemptionUpsertWithoutDocumentInput
}

input RedemptionUpdateWithoutCouponDataInput {
  createdAt: DateTime
  document: DocumentUpdateManyWithoutRedemptionInput
  id: Int
  Submission: String
  User: UserUpdateOneWithoutRedemptionsInput
}

input RedemptionUpdateWithoutDocumentDataInput {
  coupon: CouponUpdateOneRequiredWithoutRedemptionInput
  createdAt: DateTime
  id: Int
  Submission: String
  User: UserUpdateOneWithoutRedemptionsInput
}

input RedemptionUpdateWithoutUserDataInput {
  coupon: CouponUpdateOneRequiredWithoutRedemptionInput
  createdAt: DateTime
  document: DocumentUpdateManyWithoutRedemptionInput
  id: Int
  Submission: String
}

input RedemptionUpdateWithWhereUniqueWithoutCouponInput {
  data: RedemptionUpdateWithoutCouponDataInput!
  where: RedemptionWhereUniqueInput!
}

input RedemptionUpdateWithWhereUniqueWithoutUserInput {
  data: RedemptionUpdateWithoutUserDataInput!
  where: RedemptionWhereUniqueInput!
}

input RedemptionUpsertWithoutDocumentInput {
  create: RedemptionCreateWithoutDocumentInput!
  update: RedemptionUpdateWithoutDocumentDataInput!
}

input RedemptionUpsertWithWhereUniqueWithoutCouponInput {
  create: RedemptionCreateWithoutCouponInput!
  update: RedemptionUpdateWithoutCouponDataInput!
  where: RedemptionWhereUniqueInput!
}

input RedemptionUpsertWithWhereUniqueWithoutUserInput {
  create: RedemptionCreateWithoutUserInput!
  update: RedemptionUpdateWithoutUserDataInput!
  where: RedemptionWhereUniqueInput!
}

input RedemptionWhereInput {
  AND: [RedemptionWhereInput!]
  coupon: CouponWhereInput
  couponId: IntFilter
  createdAt: DateTimeFilter
  document: DocumentFilter
  id: IntFilter
  NOT: [RedemptionWhereInput!]
  OR: [RedemptionWhereInput!]
  Submission: NullableStringFilter
  User: UserWhereInput
  userId: NullableIntFilter
}

input RedemptionWhereUniqueInput {
  id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  Coupon(cursor: CouponWhereUniqueInput, skip: Int, take: Int): [Coupon!]!
  Document(cursor: DocumentWhereUniqueInput, skip: Int, take: Int): [Document!]!
  email: String!
  id: Int!
  password: String!
  redemptions(cursor: RedemptionWhereUniqueInput, skip: Int, take: Int): [Redemption!]!
  role: String!
}

input UserCreateInput {
  Coupon: CouponCreateManyWithoutRedeemerInput
  Document: DocumentCreateManyWithoutSubmitterInput
  email: String!
  password: String!
  redemptions: RedemptionCreateManyWithoutUserInput
  role: String
}

input UserCreateOneWithoutCouponInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCouponInput
}

input UserCreateOneWithoutDocumentInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDocumentInput
}

input UserCreateOneWithoutRedemptionsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRedemptionsInput
}

input UserCreateWithoutCouponInput {
  Document: DocumentCreateManyWithoutSubmitterInput
  email: String!
  password: String!
  redemptions: RedemptionCreateManyWithoutUserInput
  role: String
}

input UserCreateWithoutDocumentInput {
  Coupon: CouponCreateManyWithoutRedeemerInput
  email: String!
  password: String!
  redemptions: RedemptionCreateManyWithoutUserInput
  role: String
}

input UserCreateWithoutRedemptionsInput {
  Coupon: CouponCreateManyWithoutRedeemerInput
  Document: DocumentCreateManyWithoutSubmitterInput
  email: String!
  password: String!
  role: String
}

input UserUpdateInput {
  Coupon: CouponUpdateManyWithoutRedeemerInput
  Document: DocumentUpdateManyWithoutSubmitterInput
  email: String
  id: Int
  password: String
  redemptions: RedemptionUpdateManyWithoutUserInput
  role: String
}

input UserUpdateManyMutationInput {
  email: String
  id: Int
  password: String
  role: String
}

input UserUpdateOneWithoutCouponInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCouponInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCouponDataInput
  upsert: UserUpsertWithoutCouponInput
}

input UserUpdateOneWithoutDocumentInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDocumentInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutDocumentDataInput
  upsert: UserUpsertWithoutDocumentInput
}

input UserUpdateOneWithoutRedemptionsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRedemptionsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutRedemptionsDataInput
  upsert: UserUpsertWithoutRedemptionsInput
}

input UserUpdateWithoutCouponDataInput {
  Document: DocumentUpdateManyWithoutSubmitterInput
  email: String
  id: Int
  password: String
  redemptions: RedemptionUpdateManyWithoutUserInput
  role: String
}

input UserUpdateWithoutDocumentDataInput {
  Coupon: CouponUpdateManyWithoutRedeemerInput
  email: String
  id: Int
  password: String
  redemptions: RedemptionUpdateManyWithoutUserInput
  role: String
}

input UserUpdateWithoutRedemptionsDataInput {
  Coupon: CouponUpdateManyWithoutRedeemerInput
  Document: DocumentUpdateManyWithoutSubmitterInput
  email: String
  id: Int
  password: String
  role: String
}

input UserUpsertWithoutCouponInput {
  create: UserCreateWithoutCouponInput!
  update: UserUpdateWithoutCouponDataInput!
}

input UserUpsertWithoutDocumentInput {
  create: UserCreateWithoutDocumentInput!
  update: UserUpdateWithoutDocumentDataInput!
}

input UserUpsertWithoutRedemptionsInput {
  create: UserCreateWithoutRedemptionsInput!
  update: UserUpdateWithoutRedemptionsDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  Coupon: CouponFilter
  Document: DocumentFilter
  email: StringFilter
  id: IntFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  redemptions: RedemptionFilter
  role: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
